#!/usr/bin/env bash

# The Heroku Marten Buildpack.

# Fail fast and fail hard.
# --

set -eo pipefail

# Setup path variables, for later use in the Buildpack.
# --

BIN_DIR=$(cd "$(dirname "$0")"; pwd) # absolute path
ROOT_DIR=$(dirname "$BIN_DIR")
BUILD_DIR=$1
CACHE_DIR=$2
CRYSTAL_CACHE_DIR=$CACHE_DIR/crystal-cache
ENV_DIR=$3

# Defines some utilities.
# --

start() {
  echo
  echo "-----> $1..."
}

json_value() {
  KEY=$1
  num=${2-}
  awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/\042'"$KEY"'\042/){print $(i+1)}}}' | tr -d ' "' | sed -n "${num}p"
}

# Identifies which Crystal version should be used.
# --

if [ -f "$BUILD_DIR/.crystal-version" ]; then
  CRYSTAL_VERSION=$(cat "$BUILD_DIR/.crystal-version" | tr -d '\012')
  CRYSTAL_VERSION_REASON='due to .crystal-version file'
else
  CRYSTAL_VERSION=$(${CURL} https://api.github.com/repos/crystal-lang/crystal/releases/latest | json_value tag_name 1 | tr -d '\012')
  CRYSTAL_VERSION_REASON='due to latest release at https://github.com/crystal-lang/crystal'
fi

TAG_NAME=$(${CURL} https://api.github.com/repos/crystal-lang/crystal/releases | json_value tag_name | grep "${CRYSTAL_VERSION}")
CRYSTAL_URL=$(${CURL} "https://api.github.com/repos/crystal-lang/crystal/releases/tags/${TAG_NAME}" | grep 'https://github.com/crystal-lang/crystal/releases/download/.*-linux-x86_64.tar.gz' | sed 's/.*: "\(.*\)"/\1/')
CRYSTAL_DIR=$BUILD_DIR/.heroku/crystal
unset GIT_DIR

# Install Crystal.
# --

mkdir -p "$ENV_DIR"
mkdir -p "$CACHE_DIR/crystal"
mkdir -p "$BUILD_DIR/.profile.d"
mkdir -p "$BUILD_DIR/.heroku/crystal"

if [ -f "$CACHE_DIR/crystal/$CRYSTAL_VERSION/.cache-complete" ]; then
  start "Using cached Crystal (version $CRYSTAL_VERSION $CRYSTAL_VERSION_REASON)"
  cp -r "$CACHE_DIR/crystal/$CRYSTAL_VERSION/." "$CRYSTAL_DIR"
else
  start "Installing Crystal ($CRYSTAL_VERSION $CRYSTAL_VERSION_REASON) from $CRYSTAL_URL to $CRYSTAL_DIR"
  mkdir -p "$CRYSTAL_DIR"
  ${CURL} "$CRYSTAL_URL" | tar xz -C "$CRYSTAL_DIR" --strip-component=1
  rm -rf "$CACHE_DIR/crystal/$CRYSTAL_VERSION"
  cp -r "$CRYSTAL_DIR" "$CACHE_DIR/crystal/$CRYSTAL_VERSION"
  touch "$CACHE_DIR/crystal/$CRYSTAL_VERSION/.cache-complete"
fi

PATH="${PATH}:${CRYSTAL_DIR}/bin:${CRYSTAL_DIR}/embedded/bin/"
echo "export PATH=\$HOME/.heroku/crystal/bin:\$PATH" >> "$BUILD_DIR/.profile.d/crystal_environment.sh"

# Build the project.
# --

if [[ "$BUILD_DIR" == /tmp/* ]]; then
  cd /tmp
  rm -rf /tmp/crystal-app-build
  mv "$BUILD_DIR" /tmp/crystal-app-build
  cd /tmp/crystal-app-build
  PATH=$(echo "$PATH" | sed "s|$BUILD_DIR|/tmp/crystal-app-build|g")
  CRYSTAL_BUILD_DIR="/tmp/crystal-app-build"
else
  cd "$BUILD_DIR"
  CRYSTAL_BUILD_DIR="$BUILD_DIR"
fi

if [[ -f "$CACHE_DIR/shards/checksums" ]]; then
  start "Copying cached shards"
  cp -r "$CACHE_DIR/shards/lib" lib
fi

SHARDS_CHECKSUMS=$(md5sum shard.yml shard.lock)
if [[ "$(cat "$CACHE_DIR/shards/checksums" 2>/dev/null || :)" == "$SHARDS_CHECKSUMS" ]]; then
  start "Skipping shards install (due to shard.yml and shard.lock matching the latest cache)"
else
  start "Installing shards"
  shards install --production
  rm -rf "$CACHE_DIR/shards"
  mkdir "$CACHE_DIR/shards"
  cp -r lib "$CACHE_DIR/shards/lib"
  echo "$SHARDS_CHECKSUMS" > "$CACHE_DIR/shards/checksums"
fi

start "Ensuring that $CRYSTAL_BUILD_DIR/bin exists"
mkdir -p "$CRYSTAL_BUILD_DIR/bin"

start "Compiling .heroku/marten/marten"
mkdir -p "$BUILD_DIR/.heroku/marten"
time crystal build manage.cr -o .heroku/marten/marten --stats
echo "export PATH=\$PATH:\$HOME/.heroku/marten" >> "$BUILD_DIR/.profile.d/marten_environment.sh"

start "Compiling server"
time crystal build src/server.cr -o "$CRYSTAL_BUILD_DIR/bin/server" --stats --release

if [[ "$BUILD_DIR" == /tmp/* ]]; then
  cd /tmp
  mv /tmp/crystal-app-build "$BUILD_DIR"
  cd "$BUILD_DIR"
fi
